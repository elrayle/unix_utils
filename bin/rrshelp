#! /bin/bash
echo '-------------------------'
echo ' TEST DATABASE'
echo '-------------------------'
echo '# --- migrate test db'
echo 'rake db:migrate RAILS_ENV=test'
echo ''
echo '-------------------------'
echo ' ALLOW RECIEVE AND RETURN'
echo '-------------------------'
echo '# --- allow receive hash key -- example mocks `term_controller.params`'
echo 'allow(term_controller).to receive(:params).with(:name).and_return("My Name")'
echo ''
echo '# --- allow receive hash key -- example mocks `request.path_parameters[:action]` # "search"'
echo 'allow(request).to receive_message_chain(:path_parameters, :[]).with(:action).and_return("search")'
echo ''
echo '# --- allow message chain with arguments (works with allow and expect)'
echo 'expect_any_instance_of(Hyrax::SolrQueryService).to receive(:with_model).with(model: ::Collection).once.and_return(inst_with_model = double)'
echo 'expect(inst_with_model).to receive(:with_field_pairs).with(field_pairs: field_pairs, join_with: ' OR ').once.and_return(inst_with_full_query = double)'
echo 'expect(inst_with_full_query).to receive(:get_objects).with(use_valkyrie: true).once.and_return(collections)'
echo ''
echo '# --- allow message chain with arguments for multiple instances of the same class (works with allow and expect)'
echo 'expect(Hyrax::SolrQueryService).to receive(:new).and_return(inst1 = double, inst2 = double) # first matching call return inst1, second matching call returns inst2'
echo 'expect(inst1).to receive(:with_model).with(model: ::Collection).and_return(inst1_with_model = double)'
echo "expect(inst1_with_model).to receive(:with_field_pairs).with(field_pairs: field_pairs, join_with: ' OR ').and_return(inst1_with_full_query = double)"
echo 'expect(inst1_with_full_query).to receive(:get_objects).with(use_valkyrie: true).and_return(collections)'
echo 'expect(inst2).to receive(:with_model).with(model: ::Collection).and_return(inst2_with_model = double)'
echo "expect(inst2_with_model).to receive(:with_field_pairs).with(field_pairs: field_pairs_for_col2, join_with: ' OR ').and_return(inst2_with_full_query = double)"
echo 'expect(inst2_with_full_query).to receive(:get_objects).with(use_valkyrie: true).and_return([collection2])'
echo ''
echo '# ---  stub config setting'
echo 'allow(QaServer).to receive_message_chain(:config, :suppress_performance_gathering?).and_return(true)'
echo ''
echo '# --- allow receive default to pass through to actually calling the method; followed by specific override'
echo 'allow(persister).to receive(:save).and_call_original'
echo 'allow(persister).to receive(:save).with(resource: instance_of(Hyrax::AdministrativeSet)).and_raise(RuntimeError)'
echo ''
echo '-------------------------'
echo ' SETUP CONSTANTS'
echo '-------------------------'
echo '# --- stub an environment variable'
echo 'before { stub_const("ENV", "MAX_PERFORMANCE_CACHE_SIZE" => "8 gb") }'
echo ''
echo '-------------------------'
echo ' MATHCERS'
echo '-------------------------'
echo '# --- array'
echo '#  unordered'
echo 'expect([1,2,3]).to include(2,1,3)'
echo '#  items in include must exist in tested array, but can be a subset'
echo 'expect([1,2,3]).to include(1,3)' 
echo '#  cannot have items in the include that are not in the tested array'
echo 'FAILS: expect([1,2,3]).to include(1,4)' 
echo ''
echo '#  unordered'
echo 'expect([1,2,3]).to match_array [2,1,3]'
echo '#  items in include must exist in tested array, but can be a subset'
echo 'expect([1,2,3]).to match_array [1,3]'
echo '#  cannot have items in the match array that are not in the tested array'
echo 'FAILS: expect([1,2,3]).to match_array [1,2,4])'
echo ''
echo '# --- true/false'
echo 'expect().to be true'
echo 'expect().to be false'
echo ''

